# 列表和元组，都是一个可以放置任意数据类型的有序集合。
# 在绝大多数编程语言中，集合的数据类型必须一致。不过，对于 Python 的列表和元组来说，并无此要求

l = [1, 2, 'hello', 'world']  # 列表中同时含有int和string类型的元素
print(l)  # [1, 2, 'hello', 'world']

tup = ('jason', 22) # 元组中同时含有int和string类型的元素
print(tup)  # ('jason', 22)

# 区别：
# 列表是动态的，长度大小不固定，可以随意地增加、删减或者改变元素（mutable）。
# 而元组是静态的，长度大小固定，无法增加删减或者改变（immutable）。
# 下面的例子中，我们分别创建了一个列表与元组。你可以看到，对于列表，我们可以很轻松地让其最后一个元素，由 4 变为 40；
# 但是，如果你对元组采取相同的操作，Python 就会报错，原因就是元组是不可变的。

l = [1, 2, 3, 4]
l[3] = 40 # 和很多语言类似，python中索引同样从0开始，l[3]表示访问列表的第四个元素
print(l)  # [1, 2, 3, 40]

tup = (1, 2, 3, 4)
# tup[3] = 40 # 会报错“TypeError: 'tuple' object does not support item assignment”

# 可是，如果你想对已有的元组做任何"改变"，该怎么办呢？
# 那就只能重新开辟一块内存，创建新的元组了。
# 比如下面的例子，我们想增加一个元素 5 给元组，实际上就是创建了一个新的元组，然后把原来两个元组的值依次填充进去。
# 而对于列表来说，由于其是动态的，我们只需简单地在列表末尾，加入对应元素就可以了。如下操作后，会修改原来列表中的元素，而不会创建新的列表。


tup = (1, 2, 3, 4)
new_tup = tup + (5, ) # 创建新的元组new_tup，并依次填充原元组的值
print(new_tup)  # (1, 2, 3, 4, 5)


l = [1, 2, 3, 4]
l.append(5) # 添加元素5到原列表的末尾
print(l)  # [1, 2, 3, 4, 5]
